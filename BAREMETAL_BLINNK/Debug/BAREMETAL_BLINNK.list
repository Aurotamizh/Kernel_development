
BAREMETAL_BLINNK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000298  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08000460  08000460  00010460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080004ac  080004ac  000104b4  2**0
                  CONTENTS
  4 .ARM          00000000  080004ac  080004ac  000104b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004ac  080004b4  000104b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004ac  080004ac  000104ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004b0  080004b0  000104b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080004b4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080004b4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000104b4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000104e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000003fa  00000000  00000000  00010527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000018e  00000000  00000000  00010921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000070  00000000  00000000  00010ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000004c  00000000  00000000  00010b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000bf99  00000000  00000000  00010b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000062e  00000000  00000000  0001cb05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00041b80  00000000  00000000  0001d133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000110  00000000  00000000  0005ecb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0005edc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08000448 	.word	0x08000448

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	08000448 	.word	0x08000448

08000208 <main>:
void delayMS(int delay);
void USART2_Init (void);
char USART2_Read(void);
void USART_Text_Write( char *text);

int main (void){
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
	char c;
	RCC->AHB1ENR |= (1<<0);
 800020e:	4b1c      	ldr	r3, [pc, #112]	; (8000280 <main+0x78>)
 8000210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000212:	4a1b      	ldr	r2, [pc, #108]	; (8000280 <main+0x78>)
 8000214:	f043 0301 	orr.w	r3, r3, #1
 8000218:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOA->MODER |= (1<<10);   // PA5 pin is output
 800021a:	4b1a      	ldr	r3, [pc, #104]	; (8000284 <main+0x7c>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a19      	ldr	r2, [pc, #100]	; (8000284 <main+0x7c>)
 8000220:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000224:	6013      	str	r3, [r2, #0]
	USART2_Init ();
 8000226:	f000 f837 	bl	8000298 <USART2_Init>


	while(1){
		USART_Text_Write("CHOOSE A TO TURN ON AND B TO TURN OFF\n");
 800022a:	4817      	ldr	r0, [pc, #92]	; (8000288 <main+0x80>)
 800022c:	f000 f8a8 	bl	8000380 <USART_Text_Write>
		c = USART2_Read();
 8000230:	f000 f87a 	bl	8000328 <USART2_Read>
 8000234:	4603      	mov	r3, r0
 8000236:	71fb      	strb	r3, [r7, #7]
		USART_Text_Write(&c);
 8000238:	1dfb      	adds	r3, r7, #7
 800023a:	4618      	mov	r0, r3
 800023c:	f000 f8a0 	bl	8000380 <USART_Text_Write>
		if(c == 'A')
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	2b41      	cmp	r3, #65	; 0x41
 8000244:	d10b      	bne.n	800025e <main+0x56>
		{
			GPIOA->BSRR |= (1<<5); // led is turn ON
 8000246:	4b0f      	ldr	r3, [pc, #60]	; (8000284 <main+0x7c>)
 8000248:	699b      	ldr	r3, [r3, #24]
 800024a:	4a0e      	ldr	r2, [pc, #56]	; (8000284 <main+0x7c>)
 800024c:	f043 0320 	orr.w	r3, r3, #32
 8000250:	6193      	str	r3, [r2, #24]
			USART_Text_Write("\n");
 8000252:	480e      	ldr	r0, [pc, #56]	; (800028c <main+0x84>)
 8000254:	f000 f894 	bl	8000380 <USART_Text_Write>
			USART_Text_Write("\nLED is ON\r\n");
 8000258:	480d      	ldr	r0, [pc, #52]	; (8000290 <main+0x88>)
 800025a:	f000 f891 	bl	8000380 <USART_Text_Write>
		}
		if(c == 'B')
 800025e:	79fb      	ldrb	r3, [r7, #7]
 8000260:	2b42      	cmp	r3, #66	; 0x42
 8000262:	d1e2      	bne.n	800022a <main+0x22>
		{
		 GPIOA->BSRR |= (1<<21);  //  led is turn OFF
 8000264:	4b07      	ldr	r3, [pc, #28]	; (8000284 <main+0x7c>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a06      	ldr	r2, [pc, #24]	; (8000284 <main+0x7c>)
 800026a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800026e:	6193      	str	r3, [r2, #24]
		 USART_Text_Write("\n");
 8000270:	4806      	ldr	r0, [pc, #24]	; (800028c <main+0x84>)
 8000272:	f000 f885 	bl	8000380 <USART_Text_Write>
		 USART_Text_Write("\nLED is OFF\r\n");
 8000276:	4807      	ldr	r0, [pc, #28]	; (8000294 <main+0x8c>)
 8000278:	f000 f882 	bl	8000380 <USART_Text_Write>
		USART_Text_Write("CHOOSE A TO TURN ON AND B TO TURN OFF\n");
 800027c:	e7d5      	b.n	800022a <main+0x22>
 800027e:	bf00      	nop
 8000280:	40023800 	.word	0x40023800
 8000284:	40020000 	.word	0x40020000
 8000288:	08000460 	.word	0x08000460
 800028c:	08000488 	.word	0x08000488
 8000290:	0800048c 	.word	0x0800048c
 8000294:	0800049c 	.word	0x0800049c

08000298 <USART2_Init>:
	}

}

void USART2_Init (void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1<<17);
 800029c:	4b1f      	ldr	r3, [pc, #124]	; (800031c <USART2_Init+0x84>)
 800029e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002a0:	4a1e      	ldr	r2, [pc, #120]	; (800031c <USART2_Init+0x84>)
 80002a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002a6:	6413      	str	r3, [r2, #64]	; 0x40
	RCC->AHB1ENR |= (1<<0);
 80002a8:	4b1c      	ldr	r3, [pc, #112]	; (800031c <USART2_Init+0x84>)
 80002aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ac:	4a1b      	ldr	r2, [pc, #108]	; (800031c <USART2_Init+0x84>)
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA-> AFR[0] |= (7<<12);
 80002b4:	4b1a      	ldr	r3, [pc, #104]	; (8000320 <USART2_Init+0x88>)
 80002b6:	6a1b      	ldr	r3, [r3, #32]
 80002b8:	4a19      	ldr	r2, [pc, #100]	; (8000320 <USART2_Init+0x88>)
 80002ba:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80002be:	6213      	str	r3, [r2, #32]
	GPIOA-> AFR[0] |= (7<<8);
 80002c0:	4b17      	ldr	r3, [pc, #92]	; (8000320 <USART2_Init+0x88>)
 80002c2:	6a1b      	ldr	r3, [r3, #32]
 80002c4:	4a16      	ldr	r2, [pc, #88]	; (8000320 <USART2_Init+0x88>)
 80002c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80002ca:	6213      	str	r3, [r2, #32]
	GPIOA->MODER |= (1<<7);  //  PA3 as a Rx
 80002cc:	4b14      	ldr	r3, [pc, #80]	; (8000320 <USART2_Init+0x88>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a13      	ldr	r2, [pc, #76]	; (8000320 <USART2_Init+0x88>)
 80002d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<5);  // PA2 a a Tx
 80002d8:	4b11      	ldr	r3, [pc, #68]	; (8000320 <USART2_Init+0x88>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a10      	ldr	r2, [pc, #64]	; (8000320 <USART2_Init+0x88>)
 80002de:	f043 0320 	orr.w	r3, r3, #32
 80002e2:	6013      	str	r3, [r2, #0]

	USART2->BRR = 0x0683;  // 9600 at 16MHz
 80002e4:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <USART2_Init+0x8c>)
 80002e6:	f240 6283 	movw	r2, #1667	; 0x683
 80002ea:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= (1<<2);   // Rx Enable
 80002ec:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <USART2_Init+0x8c>)
 80002ee:	68db      	ldr	r3, [r3, #12]
 80002f0:	4a0c      	ldr	r2, [pc, #48]	; (8000324 <USART2_Init+0x8c>)
 80002f2:	f043 0304 	orr.w	r3, r3, #4
 80002f6:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= (1<<3);   // Tx Enable
 80002f8:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <USART2_Init+0x8c>)
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	4a09      	ldr	r2, [pc, #36]	; (8000324 <USART2_Init+0x8c>)
 80002fe:	f043 0308 	orr.w	r3, r3, #8
 8000302:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= (1<<13);  // USART Enable
 8000304:	4b07      	ldr	r3, [pc, #28]	; (8000324 <USART2_Init+0x8c>)
 8000306:	68db      	ldr	r3, [r3, #12]
 8000308:	4a06      	ldr	r2, [pc, #24]	; (8000324 <USART2_Init+0x8c>)
 800030a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800030e:	60d3      	str	r3, [r2, #12]

}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40023800 	.word	0x40023800
 8000320:	40020000 	.word	0x40020000
 8000324:	40004400 	.word	0x40004400

08000328 <USART2_Read>:

char USART2_Read(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
	while(!(USART2-> SR & (1<<5))){}
 800032c:	bf00      	nop
 800032e:	4b07      	ldr	r3, [pc, #28]	; (800034c <USART2_Read+0x24>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	f003 0320 	and.w	r3, r3, #32
 8000336:	2b00      	cmp	r3, #0
 8000338:	d0f9      	beq.n	800032e <USART2_Read+0x6>
	return USART2->DR;
 800033a:	4b04      	ldr	r3, [pc, #16]	; (800034c <USART2_Read+0x24>)
 800033c:	685b      	ldr	r3, [r3, #4]
 800033e:	b2db      	uxtb	r3, r3

}
 8000340:	4618      	mov	r0, r3
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	40004400 	.word	0x40004400

08000350 <USART2_Write>:

char USART2_Write (char ch)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	4603      	mov	r3, r0
 8000358:	71fb      	strb	r3, [r7, #7]
	while(!(USART2-> SR & (1<<7))){}
 800035a:	bf00      	nop
 800035c:	4b07      	ldr	r3, [pc, #28]	; (800037c <USART2_Write+0x2c>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000364:	2b00      	cmp	r3, #0
 8000366:	d0f9      	beq.n	800035c <USART2_Write+0xc>
		USART2-> DR = (ch & 0xff);
 8000368:	4a04      	ldr	r2, [pc, #16]	; (800037c <USART2_Write+0x2c>)
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	6053      	str	r3, [r2, #4]
		return ch;
 800036e:	79fb      	ldrb	r3, [r7, #7]

}
 8000370:	4618      	mov	r0, r3
 8000372:	370c      	adds	r7, #12
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr
 800037c:	40004400 	.word	0x40004400

08000380 <USART_Text_Write>:

void USART_Text_Write( char *text)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
	while(*text) USART2_Write(*text++);
 8000388:	e006      	b.n	8000398 <USART_Text_Write+0x18>
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	1c5a      	adds	r2, r3, #1
 800038e:	607a      	str	r2, [r7, #4]
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff ffdc 	bl	8000350 <USART2_Write>
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d1f4      	bne.n	800038a <USART_Text_Write+0xa>

}
 80003a0:	bf00      	nop
 80003a2:	bf00      	nop
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
	...

080003ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003ac:	480d      	ldr	r0, [pc, #52]	; (80003e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b4:	480c      	ldr	r0, [pc, #48]	; (80003e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80003b6:	490d      	ldr	r1, [pc, #52]	; (80003ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b8:	4a0d      	ldr	r2, [pc, #52]	; (80003f0 <LoopForever+0xe>)
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003bc:	e002      	b.n	80003c4 <LoopCopyDataInit>

080003be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003c2:	3304      	adds	r3, #4

080003c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c8:	d3f9      	bcc.n	80003be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ca:	4a0a      	ldr	r2, [pc, #40]	; (80003f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003cc:	4c0a      	ldr	r4, [pc, #40]	; (80003f8 <LoopForever+0x16>)
  movs r3, #0
 80003ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d0:	e001      	b.n	80003d6 <LoopFillZerobss>

080003d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d4:	3204      	adds	r2, #4

080003d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d8:	d3fb      	bcc.n	80003d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003da:	f000 f811 	bl	8000400 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003de:	f7ff ff13 	bl	8000208 <main>

080003e2 <LoopForever>:

LoopForever:
  b LoopForever
 80003e2:	e7fe      	b.n	80003e2 <LoopForever>
  ldr   r0, =_estack
 80003e4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80003e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003ec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003f0:	080004b4 	.word	0x080004b4
  ldr r2, =_sbss
 80003f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003f8:	2000001c 	.word	0x2000001c

080003fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003fc:	e7fe      	b.n	80003fc <ADC_IRQHandler>
	...

08000400 <__libc_init_array>:
 8000400:	b570      	push	{r4, r5, r6, lr}
 8000402:	4d0d      	ldr	r5, [pc, #52]	; (8000438 <__libc_init_array+0x38>)
 8000404:	4c0d      	ldr	r4, [pc, #52]	; (800043c <__libc_init_array+0x3c>)
 8000406:	1b64      	subs	r4, r4, r5
 8000408:	10a4      	asrs	r4, r4, #2
 800040a:	2600      	movs	r6, #0
 800040c:	42a6      	cmp	r6, r4
 800040e:	d109      	bne.n	8000424 <__libc_init_array+0x24>
 8000410:	4d0b      	ldr	r5, [pc, #44]	; (8000440 <__libc_init_array+0x40>)
 8000412:	4c0c      	ldr	r4, [pc, #48]	; (8000444 <__libc_init_array+0x44>)
 8000414:	f000 f818 	bl	8000448 <_init>
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	10a4      	asrs	r4, r4, #2
 800041c:	2600      	movs	r6, #0
 800041e:	42a6      	cmp	r6, r4
 8000420:	d105      	bne.n	800042e <__libc_init_array+0x2e>
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f855 3b04 	ldr.w	r3, [r5], #4
 8000428:	4798      	blx	r3
 800042a:	3601      	adds	r6, #1
 800042c:	e7ee      	b.n	800040c <__libc_init_array+0xc>
 800042e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000432:	4798      	blx	r3
 8000434:	3601      	adds	r6, #1
 8000436:	e7f2      	b.n	800041e <__libc_init_array+0x1e>
 8000438:	080004ac 	.word	0x080004ac
 800043c:	080004ac 	.word	0x080004ac
 8000440:	080004ac 	.word	0x080004ac
 8000444:	080004b0 	.word	0x080004b0

08000448 <_init>:
 8000448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044a:	bf00      	nop
 800044c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044e:	bc08      	pop	{r3}
 8000450:	469e      	mov	lr, r3
 8000452:	4770      	bx	lr

08000454 <_fini>:
 8000454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000456:	bf00      	nop
 8000458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045a:	bc08      	pop	{r3}
 800045c:	469e      	mov	lr, r3
 800045e:	4770      	bx	lr
